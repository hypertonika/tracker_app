# Uncomment this line to define a global platform for your project
platform :ios, '13.0'

# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  use_frameworks!
  use_modular_headers!

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
    flutter_additional_ios_build_settings(target)
    
    target.build_configurations.each do |config|
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
    end

    # Fix for BoringSSL-GRPC compilation
    if target.name == 'BoringSSL-GRPC'
      target.build_configurations.each do |config|
        # Reset all compiler flags and add only necessary ones
        config.build_settings['OTHER_CFLAGS'] = '-Wno-shorten-64-to-32 -Wno-error=implicit-function-declaration -Wno-everything'
        config.build_settings['OTHER_CPLUSPLUSFLAGS'] = '-Wno-shorten-64-to-32 -Wno-error=implicit-function-declaration -Wno-everything'
        config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
        config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
        
        # Add necessary preprocessor definitions
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'OPENSSL_NO_ASM=1'
        config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'].uniq

        # Disable all warnings
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['CLANG_WARN_DOCUMENTATION_COMMENTS'] = 'NO'
        config.build_settings['CLANG_WARN_STRICT_PROTOTYPES'] = 'NO'
        config.build_settings['CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF'] = 'NO'
        config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
      end

      # Add a run script phase to remove the -G flag from the response file
      script = <<-SCRIPT
        BUILD_DIR="${BUILD_DIR}"
        TARGET_TEMP_DIR="${TARGET_TEMP_DIR}"
        RESP_FILE_DIR="${TARGET_TEMP_DIR}/Objects-normal/x86_64"
        RESP_FILE_PATTERN="*-common-args.resp"

        find "${RESP_FILE_DIR}" -name "${RESP_FILE_PATTERN}" -print0 | while IFS= read -r -d $'\0' resp_file;
        do
          echo "Processing response file: ${resp_file}"
          # Use awk to remove the -G option
          # -v RS='[[:space:]]+' sets the record separator to one or more whitespace characters
          # -v ORS=' ' sets the output record separator to a single space
          # $1 != "-G" prints any field that is not exactly "-G"
          # 1 forces awk to print the line if there are no fields (i.e. empty lines after processing)
          awk -v RS='[[:space:]]+' -v ORS=' ' '/$1 != "-G"/{print $1}' "${resp_file}" > "${resp_file}.tmp" && mv "${resp_file}.tmp" "${resp_file}"
          echo "Finished processing response file: ${resp_file}"
        done
      SCRIPT

      # Find the "Compile Sources" phase and add the script
      compile_sources_phase = target.shell_script_phases.find { |phase| phase.name == "Compile Sources" }
      if compile_sources_phase
        compile_sources_phase.script = script + compile_sources_phase.script
      end

    end

    # Fix for BoringSSL-GRPC compilation by removing -G flag from source files
    if target.name == 'BoringSSL-GRPC'
      target.source_build_phase.files.each do |file|
        if file.settings && file.settings['COMPILER_FLAGS']
          flags = file.settings['COMPILER_FLAGS'].split(' ')
          flags.reject! { |flag| flag == '-G' }
          file.settings['COMPILER_FLAGS'] = flags.join(' ')
        end
      end
    end

    # Start of the permission-specific settings
    target.build_configurations.each do |config|
      # Exclude arm64 for simulator to fix build on Apple Silicon
      config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      # You can enable the permissions needed here
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= [
        '$(inherited)',
        'PERMISSION_CAMERA=1',
        'PERMISSION_PHOTOS=1',
        'PERMISSION_LOCATION=1',
      ]
    end
  end
end 